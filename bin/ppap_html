#!/usr/bin/env perl

use 5.016;
use strict;
use warnings;
use autodie;
use utf8;

use File::Spec;
use File::ShareDir qw(dist_dir);
use File::Path qw(make_path);
use File::Copy qw(copy);
use DBI;

my %OP_GROUP = (
    WANTARRAY => '',
    CONST => 'internal',
    GVSV => 'internal',
    GV => 'internal',
    GELEM => '',
    PADSV => 'pad',
    PADAV => 'pad',
    PADHV => 'pad',
    PADANY => 'pad',
    PUSHRE => 'regexp',
    REGCOMP => 'regexp',
    RV2GV => 'internal',
    RV2SV => 'internal',
    AV2ARYLEN => 'array',
    RV2CV => 'internal',
    REFGEN => '',
    SREFGEN => '',
    REF => '',
    BLESS => '',
    BACKTICK => '',
    GLOB => '',
    READLINE => 'IO',
    RCATLINE => '',
    QR => 'regexp',
    SUBST => 'regexp',
    SUBSTCONT => 'regexp',
    TRANS => 'string',
    SASSIGN => 'scalar',
    AASSIGN => 'array',
    CHOP => 'string',
    SCHOP => 'string',
    CHOMP => 'string',
    SCHOMP => 'string',
    DEFINED => 'logic',
    UNDEF => '',
    STUDY => 'string',
    POS => 'string',
    PREINC => 'math',
    I_PREINC => 'math',
    PREDEC => 'math',
    I_PREDEC => 'math',
    POSTINC => 'math',
    I_POSTINC => 'math',
    POSTDEC => 'math',
    I_POSTDEC => 'math',
    POW => 'math',
    MULTIPLY => 'math',
    I_MULTIPLY => 'math',
    DIVIDE => 'math',
    I_DIVIDE => 'math',
    MODULO => 'math',
    I_MODULO => 'math',
    REPEAT => 'multi',
    ADD => 'math',
    I_ADD => 'math',
    SUBTRACT => 'math',
    I_SUBTRACT => 'math',
    CONCAT => 'string',
    STRINGIFY => 'string',
    LEFT_SHIFT => 'math',
    RIGHT_SHIFT => 'math',
    LT => 'logic',
    I_LT => 'logic',
    GT => 'logic',
    I_GT => 'logic',
    LE => 'logic',
    I_LE => 'logic',
    GE => 'logic',
    I_GE => 'logic',
    EQ => 'logic',
    I_EQ => 'logic',
    NE => 'logic',
    I_NE => 'logic',
    NCMP => 'logic',
    I_NCMP => 'logic',
    SLT => 'logic',
    SGT => 'logic',
    SLE => 'logic',
    SGE => 'logic',
    SEQ => 'logic',
    SNE => 'logic',
    SCMP => 'logic',
    BIT_AND => 'logic',
    BIT_XOR => 'logic',
    BIT_OR => 'logic',
    NEGATE => 'logic',
    I_NEGATE => 'logic',
    NOT => 'logic',
    COMPLEMENT => '',
    SMARTMATCH => '',
    ATAN2 => 'math',
    MATCH => 'regexp',
    SIN => 'math',
    COS => 'math',
    RAND => 'math',
    SRAND => 'math',
    EXP => 'math',
    LOG => 'math',
    SQRT => 'math',
    INT => 'math',
    HEX => '',
    OCT => '',
    ABS => 'math',
    LENGTH => 'string',
    SUBSTR => 'string',
    VEC => '',
    INDEX => 'string',
    RINDEX => 'string',
    SPRINTF => 'string',
    FORMLINE => 'string',
    ORD => '',
    CHR => 'string',
    CRYPT => '',
    UCFIRST => 'string',
    LCFIRST => 'string',
    UC => 'string',
    LC => 'string',
    QUOTEMETA => '',
    RV2AV => 'internal',
    AELEMFAST => 'array',
    AELEM => 'array',
    ASLICE => 'array',
    AEACH => 'array',
    AKEYS => 'array',
    AVALUES => 'array',
    EACH => 'hash',
    VALUES => 'hash',
    KEYS => 'hash',
    DELETE => '?',
    EXISTS => '?',
    RV2HV => 'internal',
    HELEM => 'hash',
    HSLICE => 'hash',
    BOOLKEYS => 'hash',
    UNPACK => '',
    PACK => '',
    SPLIT => 'string',
    JOIN => 'string',
    LIST => 'array',
    LSLICE => 'array',
    ANONLIST => 'array',
    ANONHASH => 'hash',
    SPLICE => 'array',
    PUSH => 'array',
    POP => 'array',
    SHIFT => 'array',
    UNSHIFT => 'array',
    SORT => '',
    REVERSE => '',
    GREPSTART => '',
    GREPWHILE => '',
    MAPSTART => '',
    MAPWHILE => '',
    RANGE => '',
    FLIP => '',
    FLOP => '',
    AND => 'logic',
    OR => 'logic',
    XOR => 'logic',
    DOR => 'logic',
    COND_EXPR => 'logic',
    ANDASSIGN => '',
    ORASSIGN => '',
    DORASSIGN => '',
    METHOD => 'class',
    ENTERSUB => 'sub',
    LEAVESUB => 'sub',
    LEAVESUBLV => 'sub',
    CALLER => '',
    WARN => '',
    DIE => '',
    RESET => '',
    LINESEQ => '',
    NEXTSTATE => '',
    DBSTATE => '',
    UNSTACK => '',
    ENTER => '',
    LEAVE => '',
    SCOPE => '',
    ENTERITER => '',
    ITER => '',
    ENTERLOOP => '',
    LEAVELOOP => '',
    RETURN => '',
    LAST => '',
    NEXT => '',
    REDO => '',
    DUMP => '',
    GOTO => '',
    EXIT => '',
    METHOD_NAMED => 'class',
    ENTERGIVEN => '',
    LEAVEGIVEN => '',
    ENTERWHEN => '',
    LEAVEWHEN => '',
    BREAK => '',
    CONTINUE => '',
    OPEN => 'IO',
    CLOSE => 'IO',
    PIPE_OP => '',
    FILENO => 'IO',
    UMASK => '',
    BINMODE => 'IO',
    TIE => '',
    UNTIE => '',
    TIED => '',
    SSELECT => '',
    SELECT => '',
    GETC => 'IO',
    READ => 'IO',
    ENTERWRITE => '',
    LEAVEWRITE => '',
    PRTF => 'IO',
    PRINT => 'IO',
    SAY => 'IO',
    SYSOPEN => 'IO',
    SYSSEEK => 'IO',
    SYSREAD => 'IO',
    SYSWRITE => 'IO',
    EOF => 'IO',
    TELL => '',
    SEEK => 'IO',
    TRUNCATE => 'IO',
    FCNTL => 'IO',
    IOCTL => 'IO',
    FLOCK => '',
    SEND => '',
    RECV => '',
    SOCKET => '',
    SOCKPAIR => '',
    BIND => '',
    CONNECT => '',
    LISTEN => '',
    ACCEPT => 'IO',
    SHUTDOWN => '',
    GSOCKOPT => '',
    SSOCKOPT => '',
    GETSOCKNAME => '',
    GETPEERNAME => '',
    LSTAT => 'FS',
    STAT => 'FS',
    CHDIR => 'FS',
    CHOWN => 'FS',
    CHROOT => '',
    UNLINK => 'FS',
    CHMOD => 'FS',
    UTIME => '',
    RENAME => 'FS',
    LINK => 'FS',
    SYMLINK => 'FS',
    READLINK => 'FS',
    MKDIR => 'FS',
    RMDIR => 'FS',
    OPEN_DIR => 'FS',
    READDIR => 'FS',
    TELLDIR => 'FS',
    SEEKDIR => 'FS',
    REWINDDIR => 'FS',
    CLOSEDIR => 'FS',
    FORK => 'system',
    WAIT => 'system',
    WAITPID => 'system',
    SYSTEM => 'system',
    EXEC => 'system',
    KILL => 'system',
    GETPPID => 'system',
    GETPGRP => 'system',
    SETPGRP => 'system',
    GETPRIORITY => 'system',
    SETPRIORITY => 'system',
    TIME => 'time',
    TMS => 'time',
    LOCALTIME => 'time',
    GMTIME => 'time',
    ALARM => 'time',
    SLEEP => 'time',
    SHMGET => '',
    SHMCTL => '',
    SHMREAD => '',
    SHMWRITE => '',
    MSGGET => '',
    MSGCTL => '',
    MSGSND => '',
    MSGRCV => '',
    SEMOP => '',
    SEMGET => '',
    SEMCTL => '',
    REQUIRE => '',
    DOFILE => '',
    HINTSEVAL => 'block',
    ENTEREVAL => 'block',
    LEAVEEVAL => 'block',
    ENTERTRY => 'block',
    LEAVETRY => 'block',
    GHBYNAME => '',
    GHBYADDR => '',
    GHOSTENT => '',
    GNBYNAME => '',
    GNBYADDR => '',
    GNETENT => '',
    GPBYNAME => '',
    GPBYNUMBER => '',
    GPROTOENT => '',
    GSBYNAME => '',
    GSBYPORT => '',
    GSERVENT => '',
    SHOSTENT => '',
    SNETENT => '',
    SPROTOENT => '',
    SSERVENT => '',
    EHOSTENT => '',
    ENETENT => '',
    EPROTOENT => '',
    ESERVENT => '',
    GPWNAM => '',
    GPWUID => '',
    GPWENT => '',
    SPWENT => '',
    EPWENT => '',
    GGRNAM => '',
    GGRGID => '',
    GGRENT => '',
    SGRENT => '',
    EGRENT => '',
    GETLOGIN => '',
    SYSCALL => '',
    LOCK => '',
    ONCE => '',
    CUSTOM => '',
);

my @IGNORE = ();
foreach my $group (qw(IO FS)) {
    push @IGNORE, grep $OP_GROUP{$_} eq $group, keys %OP_GROUP;
}
$_ = lc $_ foreach @IGNORE;

say "Ignoring ". join ', ', @IGNORE;

say "Looking for or building DB";
my $dbh = report2db();

say "Calculating overall stats";
my %results = %{ $dbh->selectall_hashref(
    'SELECT name, COUNT(1) AS counter, SUM(time) AS time FROM calls'
    .' WHERE name NOT IN ('. join(', ', map "'$_'", @IGNORE) .')'
    .' GROUP BY name',
    'name', undef
) };


prepare_report_dir();
report();
exit 0;

# Вывести отчёт в html-файл
sub report {
    say "Generating index";
    my $fh = new_file('index.html');
    out_head($fh, 'PP op codes access patterns');
    out_groupped_usage($fh, \%results);
    out_pp_usage($fh, \%results);
    out_footer($fh);
    close $fh;

    pp_report($_) for sort keys %results;
}

# Generate report for specific operator
sub pp_report {
    my $op = shift;
    say "Generating report for $op";

    # Find specific 'reporter' function or use default one
    my $reporter = do {
        no strict 'refs';
        defined &{"out_pp_${op}_usage"} ? \&{"out_pp_${op}_usage"} : undef
    } || \&out_pp_generic_usage;

    my $fh = new_file('pp', "$op.html");
    out_head($fh, "$op specific usage stats", '../');
    $reporter->($fh, $op);
    out_footer($fh);
    close $fh;
}

# Обработать отчёт ppap.out
# $cb - callback, которому передаются параметры отпарсенной строки
sub walk_report {
    my $cb = shift;
    open my $fh, '<:utf8', 'ppap.out';
    while ( my $str = <$fh> ) {
        chomp($str);
        my ($ctx,$lval,$rop,$args,$time) = $str =~ /^ 
            ([-\$\@?])      # контекст ('-' - void, '$' - scalar, '@' - array, '?' - хз)
            (=?)    \s+     # lvalue ли это
            (\w+)   \s*     # имя оператора
            (.*?)   \s*     # аргументы (требует доп. парсинга)
            \{\}            # вложеные исполнения
            \=([0-9]+)      # время выполнения, отделенное знаком =
        $/x;

        unless ( $ctx ) {
            warn "String '$str' is not parsable";
            next;
        }

        $cb->($ctx, $lval, $rop, $args, $time);
    }
    close $fh;
}

sub out_groupped_usage {
    my ($out, $results) = (@_);

    my ($tcount, $ttime) = (0, 0);

    my %grps = ();
    while ( my ($op, $info) = each %$results ) {
        $grps{ $OP_GROUP{uc $op} || 'other' }{'count'} += $info->{'counter'};
        $tcount += $info->{'counter'};

        $grps{ $OP_GROUP{uc $op} || 'other' }{'time'} += $info->{'time'};
        $ttime += $info->{'time'};
    }

    render_table(
        $out,
        title => 'Groupped PPs usage',
        elements => [ sort keys %grps ],
        columns  => [qw(Group count time)],
        type     => [qw(string counter time)],
        callback => sub {
            my $group = shift;
            return [ $group, $grps{$group}{'count'}, $grps{$group}{'time'} ];
        },
        totals   => [undef, $tcount, $ttime],
    );
}

sub out_pp_generic_usage {
    my ($out, $op) = (@_);
    out_pp_context($out, $op);
}

sub out_pp_aassign_usage {
    my ($out, $op) = (@_);
    out_pp_context($out, $op);
    out_variable_arg_size($out, $op);
    out_lhs_arg_type_size($out, $op);
}

sub out_pp_method_usage {
    my ($out, $op) = (@_);
    out_pp_context($out, $op);
    out_arguments($out, $op);
}
sub out_pp_method_named_usage { out_pp_method_usage(@_) }

sub out_pp_push_usage {
    my ($out, $op) = (@_);
    out_pp_context($out, $op);
    out_variable_arg_size($out, $op);
    out_array_sufix_size_table($out, $op);
    out_array_sufix_size_graph($out, $op);
}

sub out_pp_substr_usage {
    my ($out, $op) = (@_);
    out_pp_context($out, $op);
    #out_substr_arg_count($out, $op);
}

sub out_pp_usage {
    my ($out, $results) = (@_);
    my $total = 0;
    $total += $_ foreach map $_->{'counter'}, values %$results;
    my $ttime = 0;
    $ttime += $_ foreach map $_->{'time'}, values %$results;

    render_table(
        $out,
        title => 'PPs usage',
        elements => [ sort keys %$results ],
        columns  => [qw(PP group count time average)],
        type     => [qw(string string counter time time)],
        callback => sub {
            my $op = shift;
            return [
                "<a href='pp/$op.html'>$op</a>", $OP_GROUP{uc $op} || 'other',
                $results->{$op}{'counter'}, $results->{$op}{'time'},
                $results->{$op}{'time'}/$results->{$op}{'counter'},
            ];
        },
        totals => [undef, undef, $total, $ttime],
    );
}

sub out_pp_context {
    my $out = shift;
    my $op = shift;

    my $stats = $dbh->selectall_hashref(
        'SELECT case when lvalue < 1 then context else context || "=" end AS context,'
        .' COUNT(1) AS counter, SUM(time) AS time FROM calls WHERE name = ?'
        .' GROUP BY context, lvalue',
        'context', undef, $op
    );

    render_table(
        $out,
        title => 'Context',
        elements => [ sort keys %$stats ],
        columns  => [qw(context count time average)],
        type     => [qw(string counter time time)],
        callback => sub {
            my $ctx = shift;
            return [
                $ctx,
                $stats->{$ctx}{'counter'}, $stats->{$ctx}{'time'},
                $stats->{$ctx}{'time'}/$stats->{$ctx}{'counter'},
            ];
        },
        totals => [undef,$results{$op}{'counter'}, $results{$op}{'time'}],
    );
}

sub out_substr_arg_count {
    my $out = shift;
    my $op = shift;

    my %stats  = ();
    walk_report( sub {
        my ($ctx,$lval,$rop,$args,$time) = @_;
        return unless $rop eq $op;
        my @temp_args = split(/, /, $args);
        my $args_count = @temp_args;

        my $type = undef;
        if ( $args_count == 2 ) {
            $type = 'substr EXPR,OFFSET';
        } elsif ( $args_count == 3 ) {
            $type = 'substr EXPR,OFFSET,LENGTH';
        } elsif ( $args_count == 4 ) {
            $type = 'substr EXPR,OFFSET,LENGTH,REPLACEMENT';
        } else {
            $type = 'Am I error?';
        }
        $stats{'counter'}{$type}++;
        $stats{'time'}{$type} += $time;
    } );

    render_table(
        $out,
        title => 'Substr argument count',
        elements => [ sort keys %{ $stats{'counter'} } ],
        columns  => [qw(type count time average)],
        type     => [qw(string counter time time)],
        callback => sub {
            my $ctx = shift;
            return [
                $ctx,
                $stats{'counter'}{$ctx}, $stats{'time'}{$ctx},
                $stats{'time'}{$ctx}/$stats{'counter'}{$ctx},
            ];
        },
    );
}

sub out_variable_arg_size {
    my $out = shift;
    my $op = shift;

    my $stats = $dbh->selectall_hashref(
        'SELECT v.size AS size, COUNT(1) AS counter, SUM(c.time) AS time'
        .' FROM varargs v JOIN calls c ON v.call = c.id'
        .' WHERE c.name = ? GROUP BY v.size',
        'size', undef, $op
    );
    render_table(
        $out,
        title => 'Variable argument size',
        elements => [ sort keys %$stats ],
        columns  => [qw(size count time average elements average/element)],
        type     => [qw(counter counter time time counter time)],
        callback => sub {
            my $ctx = shift;
            my $average = $stats->{$ctx}{'time'}/$stats->{$ctx}{'counter'};
            return [
                $ctx,
                $stats->{$ctx}{'counter'}, $stats->{$ctx}{'time'}, $average,
                $ctx
                    ?( $stats->{$ctx}{'counter'}*$ctx, $average/$ctx)
                    :(0,0.0)
                ,
            ];
        },
        totals => [undef, $results{$op}{'counter'}, $results{$op}{'time'}],
    );
}

sub out_lhs_arg_type_size {
    my $out = shift;
    my $op = shift;

    my $stats = $dbh->selectall_hashref(
        'SELECT c.arguments AS arguments, COUNT(1) AS counter, SUM(c.time) AS time'
        .' FROM calls c'
        .' WHERE c.name = ? GROUP BY c.arguments',
        'arguments', undef, $op
    );
    foreach my $args ( keys %$stats ) {
        my @args = grep $_, split /\s*,\s*/, $args;
        my ($rhs) = (pop(@args) =~ /\s*[.]{3}\s*(\d+)/);
        my %tmp;
        $tmp{$_}++ foreach @args;
        my $key = join ' ', map "${_}x$tmp{$_}", grep $tmp{$_}, qw($ % @);
        $stats->{ $key } ||= { counter => 0, time => 0, elements => 0 };
        $stats->{ $key }{'elements'} += $rhs;
        $stats->{ $key }{ $_ } += $stats->{ $args }{ $_ }
            foreach qw(counter time);
        delete $stats->{$args};
    }
    render_table(
        $out,
        title => 'Left hand side arguments',
        elements => [ sort keys %$stats ],
        columns  => [qw(signature count time average elements average/elements)],
        type     => [qw(string counter time time counter time)],
        callback => sub {
            my $ctx = shift;
            my $line = $stats->{ $ctx };
            my $count_perc = (100*$line->{'counter'})/$results{$op}{'counter'};
            my $time_perc = (100*$line->{'time'})/$results{$op}{'time'};
            return [
                $ctx,
                $line->{'counter'}, $count_perc,
                $line->{'time'}, $time_perc,
                ($time_perc/$count_perc),
                $line->{'elements'}, $line->{'elements'}? $line->{'time'}/$line->{'elements'} : '-',
            ];
        },
        totals => [undef, $results{$op}{'counter'}, $results{$op}{'time'}],
    );
}

sub out_arguments {
    my $out = shift;
    my $op = shift;

    my $stats = $dbh->selectall_hashref(
        'SELECT c.arguments AS arguments, COUNT(1) AS counter, SUM(c.time) AS time'
        .' FROM calls c'
        .' WHERE c.name = ? GROUP BY c.arguments',
        'arguments', undef, $op
    );
    render_table(
        $out,
        title => 'Argument(s)',
        elements => [ sort keys %$stats ],
        columns  => [qw(value count time average)],
        type     => [qw(string counter time time)],
        callback => sub {
            my $ctx = shift;
            my $line = $stats->{ $ctx };
            my $count_perc = (100*$line->{'counter'})/$results{$op}{'counter'};
            my $time_perc = (100*$line->{'time'})/$results{$op}{'time'};
            return [
                $ctx,
                $line->{'counter'}, $count_perc,
                $line->{'time'}, $time_perc,
                ($time_perc/$count_perc),
            ];
        },
        totals => [undef, $results{$op}{'counter'}, $results{$op}{'time'}],
    );
}

sub out_array_sufix_size_table {
    my $out = shift;
    my $op = shift;

    return unless $results{$op}{'counter'};

    my %stats = ();

    my $base_query = 'SELECT COUNT(a.id), SUM(a.time) FROM arrays a JOIN calls c ON a.call = c.id WHERE c.name = ?';

    my $dbh = connect_database();
    @{ $stats{'no argument'} ||={} }{'counter', 'time', 'size'} = $dbh->selectrow_array( <<END, undef, $op );
SELECT COUNT(a.call), SUM(a.time), SUM(va.size)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size = 0
END

    @{ $stats{'empty array'} ||={} }{'counter', 'time', 'size'} = $dbh->selectrow_array( <<END, undef, $op );
SELECT COUNT(a.call), SUM(a.time), SUM(va.size)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND a.prefix = 0 AND a.size = 0 AND a.suffix = 0
END

    @{ $stats{'suffix fits'} ||={} }{'counter', 'time', 'size'} = $dbh->selectrow_array( <<END, undef, $op );
SELECT COUNT(a.call), SUM(a.time), SUM(va.size) FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT(a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND a.suffix >= va.size
END

    @{ $stats{'prefix+suffix fits'} ||={} }{'counter', 'time', 'size'} = $dbh->selectrow_array( <<END, undef, $op );
SELECT COUNT(a.call), SUM(a.time), SUM(va.size)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT (a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND a.suffix < va.size
    AND a.suffix + a.prefix >= va.size
END

    @{ $stats{'no space'} ||={} }{'counter', 'time', 'size'} = $dbh->selectrow_array( <<END, undef, $op );
SELECT COUNT(a.call), SUM(a.time), SUM(va.size)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT (a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND suffix < va.size
    AND suffix + prefix < va.size
END

    render_table(
        $out,
        title => 'Suffix size',
        elements => ['no argument', 'empty array', 'suffix fits', 'prefix+suffix fits', 'no space' ],
        columns  => [qw(status count time average average/element)],
        type     => [qw(string counter time time time)],
        callback => sub {
            my $ctx = shift;
            return [ $ctx, ('')x7 ] unless $stats{$ctx}{'counter'};
            my $average = $stats{$ctx}{'time'}/$stats{$ctx}{'counter'};
            return [
                $ctx,
                $stats{$ctx}{'counter'}, $stats{$ctx}{'time'}, $average,
                $stats{$ctx}{'size'}
                    ? $average/$stats{$ctx}{'size'}
                    : 0.0,
            ];
        },
    );
}

sub out_array_sufix_size_graph {
    my $out = shift;
    my $op = shift;

    return unless $results{$op}{'counter'};

    my $gid = $op .'_array_sufix_size_graph';

    my $dbh = connect_database();
    my ($base_line) = $dbh->selectrow_array( <<END, undef, $op );
SELECT AVG(c.time) FROM calls c JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size = 0
END

    my @data;
    push @data, $dbh->selectall_arrayref( <<END, undef, $op );
SELECT va.size, AVG(c.time)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND a.prefix = 0 AND a.size = 0 AND a.suffix = 0
GROUP BY va.size
END

    push @data, $dbh->selectall_arrayref( <<END, undef, $op );
SELECT va.size, AVG(c.time)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT(a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND a.suffix >= va.size
GROUP BY va.size
END

    push @data, $dbh->selectall_arrayref( <<END, undef, $op );
SELECT va.size, AVG(c.time)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT (a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND a.suffix < va.size
    AND a.suffix + a.prefix >= va.size
GROUP BY va.size
END

    push @data, $dbh->selectall_arrayref( <<END, undef, $op );
SELECT va.size, AVG(c.time)
FROM calls c JOIN arrays a ON a.call = c.id JOIN varargs va ON va.call = c.id
WHERE c.name = ? AND va.size != 0
    AND NOT (a.prefix = 0 AND a.size = 0 AND a.suffix = 0)
    AND suffix < va.size
    AND suffix + prefix < va.size
GROUP BY va.size
END

    my @js_data;
    push @js_data, '['. join( ', ', map "[$_]", map join(', ', @$_), @$_ ) .']'
        foreach @data;

    print $out <<END;
<script>
jQuery(document).ready(function() {
    \$.plot(\$("#$gid"), [
        {
            data: $js_data[0],
            label: "empty array",
            lines: { show: true },
            points: { show: true },
        },
        {
            data: $js_data[1],
            label: "suffix fits",
            lines: { show: true },
            points: { show: true },
        },
        {
            data: $js_data[2],
            label: "prefix+suffix fits",
            lines: { show: true },
            points: { show: true },
        },
        {
            data: $js_data[3],
            label: "no space",
            lines: { show: true },
            points: { show: true },
        },
    ]);
});
</script>
<div id="$gid" style="width:600px;height:450px;"></div>
END

}

sub render_table {
    my $out = shift;
    my %args = @_;

    my $res = '';
    if ( $args{'title'} ) {
        $res .= "<h1>$args{'title'}</h1>\n";
    }
    $res .= '<table class="sortable"';
    unless ( $args{'sort'} ) {
        foreach my $name (qw(time counter)) {
            next unless grep $name eq $_, @{ $args{'columns'} };
            $args{'sort'} = $name;
            last;
        }
        $args{'sort'} ||= $args{columns}[0];
    }
    foreach my $i ( 0 .. @{ $args{'columns'} }-1 ) {
        my ($name, $type) = ($args{'columns'}[$i], $args{'type'}[$i]);
        next unless $name eq $args{'sort'};
        my $order = $type eq 'string'? '0': '1';
        $res .= qq{ data-sortlist="[[$i,$order]]"};
    }

    $res .= ">\n";
    $res .= "<thead><tr>";
    foreach my $i ( 0 .. @{ $args{'columns'} }-1 ) {
        my ($name, $type) = ($args{'columns'}[$i], $args{'type'}[$i]);
        if ( $type eq 'string' ) {
            $res .= '<th>';
        } else {
            $res .= '<th data-sort-initial-order="desc">';
        }
        $res .= $name;
        $res .= '</th>';
    }
    $res .= "</tr></thead>\n";

    foreach my $e ( @{ $args{'elements'} } ) {
        $e = $args{'callback'}->( $e );
    }

    $res .= "<tbody>\n";

    {
        use Encode; Encode::_utf8_on($res);
        open my $fh, '>>:utf8', \$res;
        foreach my $row ( @{ $args{'elements'} } ) {
            render_table_row( $fh, $row, %args );
        }
        close $fh;
        $res .= "</tbody>\n";

        $res .= "<tfoot>\n";
        open $fh, '>>:utf8', \$res;
        render_table_foot_row( $fh, $args{'totals'}, %args );
        close $fh;
        $res .= "</tfoot>\n";
    }

    $res .= "</table>\n\n";

    print $out $res;
}

sub friendly_time {
    my $val = shift or return "0"; # nano

    if ( $val > 1 ) {
        my @unit = ('n','μ','m','','k','M','G','T');
        while ($val > 1000 && @unit > 1) {
            $val /= 1000; shift @unit;
        }
        return sprintf "%0.3f %ss", $val, shift @unit;
    } else {
        my @unit = ('n','p','f','a','z','y');
        while ($val < 1 && @unit > 1) {
            $val *= 1000; shift @unit;
        }
        return sprintf "%0.3f %ss", $val, shift @unit;
    }
}

sub friendly_counter {
    my $val = shift or return "0"; # nano

    my @unit = ('','k','M','G','T');
    while ($val >= 100000 && @unit > 1) {
        $val /= 1000; shift @unit;
    }
    return sprintf "%d%s", $val, shift @unit;
}

sub friendly_value {
    my ($type, $val) = @_;

    if ( $type eq 'string' ) {
        return $val
    }
    elsif ( $type eq 'counter' ) {
        return friendly_counter($val);
    }
    elsif ( $type eq 'number' ) {
        return sprintf '%0.3f', $val;
    }
    elsif ( $type eq 'time' ) {
        return friendly_time( $val*100 );
    }
    die "boo: $type";
}

sub render_table_row {
    my ($out, $row, %args) = @_;

    my $res = "<tr>";
    foreach my $i ( 0 .. @{ $args{'columns'} }-1 ) {
        my ($val, $type) = ($row->[$i], $args{'type'}[$i]);
        $val = '' unless defined $val;

        $res .= sprintf '<td class="%s">', $type;
        $res .= sprintf '<span class="raw hidden">%s</span>', $val;
        unless ( length $val ) {
            $res .= '&nbsp;'.'</td>'; next;
        }
        if ( $type eq 'string' ) {
            $res .= $val .'</td>'; next;
        }

        my $fval = friendly_value( $type => $val );
        if ( my $total = $args{'totals'}[$i] ) {
            my $alt = 100*$val/$args{'totals'}[$i];
            my $falt = sprintf '%0.2f%%', $alt;
            $res .= qq{<span class="value" title="$falt">$fval</span>};
            $res .= qq{ <small class="alt muted" title="$fval">($falt)</small>};
        } else {
            $res .= qq{<span class="value">$fval</span>};
        }

    }
    $res .= "</tr>\n";

    print $out $res;
}

sub render_table_foot_row {
    my ($out, $row, %args) = @_;

    my $res = "<tr>";
    foreach my $i ( 0 .. @{ $args{'columns'} }-1 ) {
        my ($val, $type) = ($row->[$i], $args{'type'}[$i]);
        $val = '' unless defined $val;

        $res .= sprintf '<td class="%s">', $type;
        $res .= sprintf '<span class="raw hidden">%s</span>', $val;
        unless ( length $val ) {
            $res .= '&nbsp;'.'</td>'; next;
        }
        if ( $type eq 'string' ) {
            $res .= $val .'</td>'; next;
        }

        my $fval = friendly_value( $type => $val );
        $res .= qq{<span class="value">$fval</span>};
    }
    $res .= "</tr>\n";

    print $out $res;
}

sub out_context {
    my ($out, $results) = (@_);
    my %total = ();

    my $res = '';

    $res .= "<h1>Context</h1>\n";
    $res .= "<table>\n<tr><th>&nbsp;</th><th>void</th><th>scalar</th><th>array</th></tr>\n";

    foreach my $op ( sort { $a cmp $b } keys %$results ) {
        my $total = 0;
        $total += $_ foreach values %{ $results->{$op} };
        $total{$_} += $results->{$op}{$_} || 0 foreach qw(- $ @);
        
        $res .= "<tr><th>$op</th>";
        foreach my $ctx ( qw(- $ @) ) {
            my $value = $results->{$op}{$ctx};
            $res .= $value
                ? sprintf("<td>%d<sup>%0.2f%%</sup></td>", $value, (100*$value)/$total )
                : "<td>-</td>"
            ;
        }
        $res .= "</tr>\n";
    }

    my $total = 0;
    $total += $_ foreach values %total;
    $res .= "<tr><th>Total:</th>";
    foreach my $ctx ( qw(- $ @) ) {
        $res .= $total{$ctx}
            ? sprintf(
                "<td>%d<sup>%0.2f%%</sup></td>",
                $total{$ctx}, (100*$total{$ctx})/$total
            )
            : "<td>-</td>"
        ;
    }
    $res .= "</tr>\n";
    $res .= "</table>\n";

    print $out $res;
}

sub fractiles {
    return (100, 99, 98, 97, 96, 95, 90, 80, 70, 60, 50, 30, 10);
}

sub max(@) {
    my $res = 0;
    $res < $_ and $res = $_
        foreach @_;
    return $res;
}

sub calc_fractiles {
    my $data = shift;
    my $total = shift || 0;
    unless ( $total ) {
        $total += $_ foreach values %$data;
    }

    my %copy = %$data;
    use Data::Dumper;

    my @fractiles = fractiles();

    my %res;

    my $sum = 100; my $max = max keys %copy;
    foreach my $v ( sort { $copy{$a} <=> $copy{$b} } keys %copy ) {
        my $portion = (100*$copy{ $v })/$total;
        if ( ($sum - $portion) < $fractiles[0] ) {
            while ( @fractiles && $sum <= $fractiles[0] ) {
                $res{ shift @fractiles } = $max;
            }
            last unless @fractiles;
        }
        $sum -= $portion;
        delete $copy{ $v };
        $max = max keys %copy
            if $max == $v;
    }

    return \%res;
}

# Вывод заголовка HTML-страницы
sub out_head {
    my $out    = shift;
    my $title  = shift;
    my $prefix = shift || '';

    print $out <<"END_HEADER";
<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<title>$title</title>
<link rel="stylesheet" href="${prefix}css/bootstrap.min.css" type="text/css" media="all" />
<link rel="stylesheet" href="${prefix}css/tablesorter.css" type="text/css" media="all" />
<link rel="stylesheet" href="${prefix}css/main.css" type="text/css" media="all" />
<script type="text/javascript" src="${prefix}js/jquery.min.js"></script>
<script type="text/javascript" src="${prefix}js/jquery.tablesorter.min.js"></script>
<script type="text/javascript" src="${prefix}js/jquery.tablesorter.widgets.min.js"></script>
<!--[if IE]><script language="javascript" type="text/javascript" src="${prefix}js/excanvas.min.js"></script><![endif]-->
<script type="text/javascript" src="${prefix}js/jquery.flot.min.js"></script>
<script type="text/javascript" src="${prefix}js/ppap.js"></script>
</head>
<body>
<div class="container-fluid"><div class="row-fluid">

END_HEADER

}

# Вывод футера
sub out_footer {
    my $out = shift;
    print $out "</div></div></body></html>\n";
}

# Создание каталога с HTML-отчетом
sub prepare_report_dir {
    foreach my $n (qw(css js img)) {
        my $src = File::Spec->catfile( dist_dir('Devel-PPAP'), $n, '*' );
        print "$src\n";
        my $dst = File::Spec->catdir('ppap', $n);
        make_path( $dst, {} );
        copy($_, $dst) foreach glob $src;
    }
}

sub new_file {
    my @path = @_;
    my $name = pop @path;
    my $dir = File::Spec->catfile('ppap', @path);
    make_path($dir);
    open my $fh, '>:utf8', File::Spec->catfile( $dir, $name );
    return $fh;
}

sub report2db {
    my $dbh = connect_database();
    unless ($dbh) {
        create_database();
        import_database();
        create_database_indexes();
        $dbh = connect_database();
    }
    return $dbh;
}

sub import_database {
    my $dbh = connect_database();

    my $id = 1;
    my $sth_calls = $dbh->prepare('INSERT INTO calls(id, name, context, lvalue, arguments, time) VALUES(?, ?, ?, ?, ?, ?)');
    my $sth_arrays = $dbh->prepare('INSERT INTO arrays VALUES(?, ?, ?, ?, ?, ?)');
    my $sth_varargs = $dbh->prepare('INSERT INTO varargs VALUES(?, ?)');
    walk_report( sub {
        my ($ctx, $lval, $op, $args, $time) = @_;
        $sth_calls->execute($id, $op, $ctx, $lval ? 1 : 0, $args, $time);

        # XXX: multiple arrays in one op?
        if ( $args =~ /\@_?\(0x([0-9a-f]+)\)([0-9]+)-([0-9]+)-([0-9]+)/ ) {
            $sth_arrays->execute( $id, $1, $2, $3, $4, $time );
        }
        if ( $args =~ /\.\.\.([0-9]+)$/ ) {
            $sth_varargs->execute( $id, $1 );
        }
        $dbh->commit if $id%5000 == 0;
        $id++;
    } );
}

sub create_database_indexes {
    my $dbh = connect_database();

    $dbh->do('CREATE INDEX calls1 ON calls(name)');
    $dbh->do('CREATE INDEX arrays1 ON arrays(call)');
    $dbh->do('CREATE INDEX varargs1 ON varargs(call)');
    $dbh->commit;
}

sub create_database {
    my $name = 'ppap.db';
    { local $@; eval { unlink $name }; }
    my $dbh = DBI->connect(
        'dbi:SQLite:'. $name, undef, undef,
        { AutoCommit => 0 }
    ) or die "Couldn't create DB";

    $dbh->do( <<END ) or die $dbh->errstr;
CREATE TABLE calls(
    id integer not null,
    name varchar(32) not null,
    context char(1),
    lvalue tinyint not null default 0,
    arguments text,
    time int
)
END

    $dbh->do( <<END ) or die $dbh->errstr;
CREATE TABLE arrays(
    call int not null,
    address char(16) not null,
    prefix int not null default 0,
    size   int not null,
    suffix int not null default 0,
    time int
)
END

    $dbh->do( <<END ) or die $dbh->errstr;
CREATE TABLE varargs(
    call int not null,
    size int
)
END
    $dbh->commit;
}

{ my $dbh;
sub connect_database {
    return $dbh if $dbh;

    my $name = 'ppap.db';
    return unless -e $name;

    $dbh = DBI->connect(
        'dbi:SQLite:'. $name, undef, undef,
        { AutoCommit => 0, RaiseError => 1, }
    ) or die "Couldn't open DB";

    $dbh->do('PRAGMA synchronous = OFF');
    $dbh->do('PRAGMA cache_size = 20000');
    return $dbh;

} }

BEGIN { $SIG{'INT'} = sub { require Carp; print STDERR Carp::longmess('Killed'); exit 1 }; }

